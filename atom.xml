<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Javaer的博客</title>
  <subtitle>不卑不亢，不骄不躁</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://javaer.site/"/>
  <updated>2017-05-06T09:35:17.902Z</updated>
  <id>http://javaer.site/</id>
  
  <author>
    <name>Javaer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hey Jude or Let it be ?</title>
    <link href="http://javaer.site/2017/05/06/Hey-Jude-or-Let-it-be/"/>
    <id>http://javaer.site/2017/05/06/Hey-Jude-or-Let-it-be/</id>
    <published>2017-05-06T09:34:07.000Z</published>
    <updated>2017-05-06T09:35:17.902Z</updated>
    
    <content type="html"><![CDATA[<p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1821593&auto=0&height=66"></iframe><br>今年的夏天来得格外的早<br>虽是初夏，却沉闷燥热许久<br>喜欢往年初夏的早晨和傍晚<br>早晨，阳光初透，悠然的洒在绿中透黄的嫩叶上<br>风不热，也不冷，暖暖的，柔柔的<br>傍晚，夕阳西下，凝重的射在可爱漂浮的白云上<br>风不燥，微微凉，静静的，悄悄的<a id="more"></a><br>然而，此刻的初夏<br>却有往年盛夏的沉闷和燥热<br>或许，是因为内心的狂躁吧</p>
<p>叮嘱过自己要不骄不躁<br>或许是最近发生了太多<br>让我自己措手不及<br>以至于往事随风飘散时<br>我还想让它飘的慢一点<br>这样能让我可有迹可循<br>生活还是得向前看<br>当生活一团糟时，我选择Hey Jude</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=1821593&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;今年的夏天来得格外的早&lt;br&gt;虽是初夏，却沉闷燥热许久&lt;br&gt;喜欢往年初夏的早晨和傍晚&lt;br&gt;早晨，阳光初透，悠然的洒在绿中透黄的嫩叶上&lt;br&gt;风不热，也不冷，暖暖的，柔柔的&lt;br&gt;傍晚，夕阳西下，凝重的射在可爱漂浮的白云上&lt;br&gt;风不燥，微微凉，静静的，悄悄的&lt;/p&gt;
    
    </summary>
    
    
      <category term="心情" scheme="http://javaer.site/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>禾雀花开</title>
    <link href="http://javaer.site/2017/04/08/%E7%A6%BE%E9%9B%80%E8%8A%B1%E5%BC%80/"/>
    <id>http://javaer.site/2017/04/08/禾雀花开/</id>
    <published>2017-04-08T08:53:09.000Z</published>
    <updated>2017-04-08T10:24:08.447Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2017/04/08/禾雀花开/1.jpg" alt="禾雀花"></p>
<p>广州的春天除了有地板在冒汗、墙壁在哭泣的潮湿，更有 ‘疯’ 一样盛开的花儿，’花城’ 的称谓也实至名归。  </p>
<p>周六的早上，6点多就醒了，或许是头一天的碎碎念起了效果，一直都想带着相机出去外边拍拍花花草草，于是乎，翻箱倒柜，把半年没有摸过的相机给收拾了出来。 清明前后的时候一直有人说广州的禾雀花盛开了，很是漂亮。网上搜寻了一下，广州有很多山、公园都有此花，天鹿湖森林公园、华南植物园、白云山，其中要数天鹿湖森林公园最为壮观。<br><a id="more"></a></p>
<p>天鹿湖森林公园离我住的地方只有5站公交站的距离，可人实在是多得不要不要的，挤了两趟公交都没挤上去，于是决定去相对人少的华南植物园。  </p>
<p>禾雀花，我也是第一次见，看见的时候还是蛮激动的，朵朵花儿远远看去真的犹如一群的禾雀，惟妙惟肖。据说，这是有故事的花儿，故事的大致内容是：<code>相传有一天早上，八仙之一的铁拐李到公坑寺附近去云游，在经过一片农田的时候看见一群一群的麻雀欢快的飞到稻田里去偷吃稻谷。而农夫则是拿着扫帚从农田的这边赶，但是禾雀就飞到那边去吃，从那边赶的时候，禾雀就飞到这边来吃。农夫只好是眼巴巴地看着那一大群禾雀啄食完他半年辛苦辛苦种出来的粮食，痛心疾首，十分伤心，而那些顽皮的禾雀不但没有停下来的意思，反而是叽叽喳喳地嘲笑着农夫的无能，还在那里互相打闹起来。铁拐李看到这种情景，觉得这群麻雀真的是太过顽皮、做的太过分了，便随手从山边址下一条山藤来，使出八仙中特有的法术，把那些偷吃的禾雀全部捆绑在一起，而且还把他们一串一串的挂在树上去，只准让那些鸟在青黄不接的清明前后飞出来。从此以后，这里就再也没有禾雀出来偷吃稻谷了，而从此也多了一种漂亮的禾雀花。</code><br>粉色的禾雀花<br><img src="/2017/04/08/禾雀花开/2.jpg" alt="禾雀花"><br>白色的禾雀花<br><img src="/2017/04/08/禾雀花开/3.jpg" alt="禾雀花"><br>一棵开花的树，不知道什么名字，阴雨下慎重地开满了花<br><img src="/2017/04/08/禾雀花开/4.jpg" alt="一棵开花的树"><br>落了一地的花瓣<br><img src="/2017/04/08/禾雀花开/5.jpg" alt="一地的花瓣"><br>特别的荷花<br><img src="/2017/04/08/禾雀花开/7.jpg" alt="荷花"><br>最爱的山茶花<br><img src="/2017/04/08/禾雀花开/8.jpg" alt="山茶花"><br>昨天下班拍的木棉花，广州的市花，怎么能少<br><img src="/2017/04/08/禾雀花开/9.jpg" alt="木棉花"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2017/04/08/禾雀花开/1.jpg&quot; alt=&quot;禾雀花&quot;&gt;&lt;/p&gt;
&lt;p&gt;广州的春天除了有地板在冒汗、墙壁在哭泣的潮湿，更有 ‘疯’ 一样盛开的花儿，’花城’ 的称谓也实至名归。  &lt;/p&gt;
&lt;p&gt;周六的早上，6点多就醒了，或许是头一天的碎碎念起了效果，一直都想带着相机出去外边拍拍花花草草，于是乎，翻箱倒柜，把半年没有摸过的相机给收拾了出来。 清明前后的时候一直有人说广州的禾雀花盛开了，很是漂亮。网上搜寻了一下，广州有很多山、公园都有此花，天鹿湖森林公园、华南植物园、白云山，其中要数天鹿湖森林公园最为壮观。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="心情" scheme="http://javaer.site/tags/%E5%BF%83%E6%83%85/"/>
    
      <category term="花花草草" scheme="http://javaer.site/tags/%E8%8A%B1%E8%8A%B1%E8%8D%89%E8%8D%89/"/>
    
  </entry>
  
  <entry>
    <title>一首清歌 几许烟雨</title>
    <link href="http://javaer.site/2017/03/18/%E4%B8%80%E9%A6%96%E6%B8%85%E6%AD%8C-%E5%87%A0%E8%AE%B8%E7%83%9F%E9%9B%A8/"/>
    <id>http://javaer.site/2017/03/18/一首清歌-几许烟雨/</id>
    <published>2017-03-18T11:40:53.000Z</published>
    <updated>2017-03-18T14:55:53.773Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=417250673&auto=0&height=66"></iframe>

<p>细雨霏霏，寒意微微<br>春天的雨总是那样如约而至<br>忙了一整天，要回去的时候<br>被缠绵的春雨给挡了回去<br>最近，有些忙，有些惆怅<br>就如同此刻的场景<br>剪不断，理还乱  </p>
<a id="more"></a> 
<p>忙，在于事多、人少<br>愁，在于招人、寻梦<br>相信，在大家的努力下<br>这些，都不是个事儿  </p>
<p>近期，听了一首新歌<br>叫《父亲写的散文诗》<br>好久没有那么感动过<br>由此，想起了自己的父亲<br>已到花甲之年<br>为了儿女还在各种操劳<br>父爱如山<br>愿父亲健康、快乐    </p>
<p>一年回去2-3次<br>家虽然熟悉，但也像是过客<br>每当习惯时，转眼却得离开<br>这些年，真的<br>非常感谢姐姐、姐夫<br>对父母的照顾<br>都说了2017年，我们铿锵前行<br>相信一切都会变好<br>大家都要好好的 ^_^</p>
]]></content>
    
    <summary type="html">
    
      &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=417250673&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;细雨霏霏，寒意微微&lt;br&gt;春天的雨总是那样如约而至&lt;br&gt;忙了一整天，要回去的时候&lt;br&gt;被缠绵的春雨给挡了回去&lt;br&gt;最近，有些忙，有些惆怅&lt;br&gt;就如同此刻的场景&lt;br&gt;剪不断，理还乱  &lt;/p&gt;
    
    </summary>
    
    
      <category term="心情" scheme="http://javaer.site/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot与ActiveMQ的整合实践</title>
    <link href="http://javaer.site/2017/02/25/SpringBoot%E4%B8%8EActiveMQ%E7%9A%84%E6%95%B4%E5%90%88%E5%AE%9E%E8%B7%B5/"/>
    <id>http://javaer.site/2017/02/25/SpringBoot与ActiveMQ的整合实践/</id>
    <published>2017-02-25T09:11:36.000Z</published>
    <updated>2017-02-25T09:11:36.736Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2017/02/25/SpringBoot与ActiveMQ的整合实践/1.jpg" alt="路边的野花"></p>
<p>这周以来，广州一直处于阴冷潮湿之中，本以为会东风送暖，春回大地，未曾想到来了一个断崖式的降温，只好把已经装箱的秋衣秋裤给重新翻了出来。好些天没有放晴了，灰色的天，淅沥的雨，肆虐的风这些场景仿佛像是去年的冬天。  </p>
<p>这段时间为了解决接口的异步调用，学习梳理了一下消息队列（Message Queue）的一些知识，并且已经运用到产品的开发之中。下面就说说SpringBoot如何整合ActiveMQ吧。<br><a id="more"></a></p>
<p>SpringBoot1.4.1版本才将ActiveMQ的Stater集成进来，1.4.1之前的版本集成的是HornetQ和RabbitMQ，就目前流行的程度来讲RabbitMQ和Kafka是主流，从熟悉的人数来讲当之无愧的是ActiveMQ，ActiveMQ虽然有点英雄迟暮的感觉，但是因为笔者所负责开发的产品在可预见的范围之内没有性能上的压力，所以还是选择了更为熟知的ActiveMQ。</p>
<h4 id="1、引入相关的Maven依赖"><a href="#1、引入相关的Maven依赖" class="headerlink" title="1、引入相关的Maven依赖"></a>1、引入相关的Maven依赖</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;spring-boot-starter-activemq&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<h4 id="2、配置属性文件"><a href="#2、配置属性文件" class="headerlink" title="2、配置属性文件"></a>2、配置属性文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">#activeMQ地址</div><div class="line">spring.activemq.broker-url=tcp://192.168.0.132:61616</div><div class="line">#activeMQ的用户名</div><div class="line">#spring.activemq.user=admin</div><div class="line">#activeMQ密码</div><div class="line">#spring.activemq.password=admin </div><div class="line">#是否启用内存模式（也就是不安装MQ，项目启动时同时也启动一个MQ实例）</div><div class="line">spring.activemq.in-memory=false</div><div class="line">#是否替换默认的connectionFactory</div><div class="line">spring.activemq.pool.enabled=false</div><div class="line">#最大连接数</div><div class="line">spring.activemq.pool.maxConnections=2</div><div class="line">#超时时间</div><div class="line">spring.activemq.pool.expiryTimeout=0</div><div class="line">#空闲时间</div><div class="line">spring.activemq.pool.idleTimeout=30000</div><div class="line">#信任所有的包</div><div class="line">spring.activemq.packages.trust-all=true</div></pre></td></tr></table></figure>
<h4 id="3、开启JMS，生成队列"><a href="#3、开启JMS，生成队列" class="headerlink" title="3、开启JMS，生成队列"></a>3、开启JMS，生成队列</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> site.javaer.springboot.mq.config;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.jms.Queue;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.activemq.command.ActiveMQQueue;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.jms.annotation.EnableJms;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * 类名称：ActiveMQConfig</div><div class="line"> * 类描述：</div><div class="line"> * 创建人：lzg</div><div class="line"> * 创建时间：2017年2月25日 下午3:47:54</div><div class="line"> * Copyright (c)： 2017</div><div class="line"> * <span class="doctag">@version</span> 1.0</div><div class="line"> */</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableJms</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveMQConfig</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 生成队列1</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@Bean</span>(name=<span class="string">"queue1"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queue1</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ActiveMQQueue(<span class="string">"queue1"</span>);  </div><div class="line">    &#125; </div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 生成队列2</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@Bean</span>(name=<span class="string">"queue2"</span>)  </div><div class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queue2</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ActiveMQQueue(<span class="string">"queue2"</span>);  </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4、MQ测试控制器"><a href="#4、MQ测试控制器" class="headerlink" title="4、MQ测试控制器"></a>4、MQ测试控制器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> site.javaer.springboot.mq.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</div><div class="line"></div><div class="line"><span class="keyword">import</span> site.javaer.springboot.mq.service.MQProductService;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * 类名称：MQController</div><div class="line"> * 类描述：</div><div class="line"> * 创建人：lzg</div><div class="line"> * 创建时间：2017年2月25日 下午4:04:22</div><div class="line"> * Copyright (c)： 2017</div><div class="line"> * <span class="doctag">@version</span> 1.0</div><div class="line"> */</div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MQController</span> <span class="keyword">extends</span> <span class="title">BaseController</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="keyword">private</span> MQProductService mqProductService;		<span class="comment">//消息生产者</span></div><div class="line">	</div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/mq/send"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</div><div class="line">		Map&lt;String, String&gt; params = <span class="keyword">super</span>.parameter2Map(request);</div><div class="line">		mqProductService.send(params);</div><div class="line">		<span class="keyword">return</span> <span class="string">"send"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5、定义消息生产者"><a href="#5、定义消息生产者" class="headerlink" title="5、定义消息生产者"></a>5、定义消息生产者</h4><p>消息生产者中定义消息发送的队列为queue1，发送的内容为一个Map<string,string>对象，本次想要实现的效果是：<br>Controller调用MQProductService方法发送一个Map对象到queue1，queue1消费者接受到内容后处理请求，如果一切正常，那么将处理后的结果转发给queue2，如果处理异常那么转发给死信队列进行处理。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> site.javaer.springboot.mq.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.jms.Queue;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</div><div class="line"><span class="keyword">import</span> org.springframework.jms.core.JmsMessagingTemplate;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * 类名称：MQProductService</div><div class="line"> * 类描述：</div><div class="line"> * 创建人：lzg</div><div class="line"> * 创建时间：2017年2月25日 下午3:52:24</div><div class="line"> * Copyright (c)</div><div class="line"> * <span class="doctag">@version</span> 1.0</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MQProductService</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="keyword">private</span> JmsMessagingTemplate jmsMessagingTemplate;</div><div class="line">	</div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="meta">@Qualifier</span>(<span class="string">"queue1"</span>)</div><div class="line">	<span class="keyword">private</span> Queue queue;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 往消息队列中发送消息</div><div class="line">	 * <span class="doctag">@param</span> params</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(Map&lt;String,String&gt; params)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.jmsMessagingTemplate.convertAndSend(<span class="keyword">this</span>.queue, params);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></string,string></p>
<h4 id="6、定义消息消费者"><a href="#6、定义消息消费者" class="headerlink" title="6、定义消息消费者"></a>6、定义消息消费者</h4><p>消费者类中通过继承MessageListenerAdapter实现消息队列参数的转换，经测试发现可以直接传递Map对象，本测试代码通过模拟某一个输入时认为的抛出异常来测试消息队列之间的扭转。正常情况下，Controller向队列1发送请求，队列1收到请求后进行相关的业务逻辑处理，处理完成后将处理完的返回值给queue2，接着queue2进行处理，在这过程中加入某一个环节处理失败，抛出异常，调用rollback，将消息放入死信队列中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> site.javaer.springboot.mq.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.jms.JMSException;</div><div class="line"><span class="keyword">import</span> javax.jms.Message;</div><div class="line"><span class="keyword">import</span> javax.jms.Session;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.jms.annotation.JmsListener;</div><div class="line"><span class="keyword">import</span> org.springframework.jms.listener.adapter.MessageListenerAdapter;</div><div class="line"><span class="keyword">import</span> org.springframework.jms.support.converter.MessageConversionException;</div><div class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.SendTo;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * 类名称：MQConsumeService</div><div class="line"> * 类描述：</div><div class="line"> * 创建人：lzg</div><div class="line"> * 创建时间：2017年2月25日 下午3:52:49</div><div class="line"> * Copyright (c)： 2017</div><div class="line"> * <span class="doctag">@version</span> 1.0</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MQConsumeService</span> <span class="keyword">extends</span> <span class="title">MessageListenerAdapter</span></span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * queue1消费方法区</div><div class="line">	 * <span class="doctag">@param</span> message</div><div class="line">	 * <span class="doctag">@param</span> session</div><div class="line">	 */</div><div class="line">    <span class="meta">@JmsListener</span>(destination = <span class="string">"queue1"</span>)</div><div class="line">    <span class="meta">@SendTo</span>(<span class="string">"queue2"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">receiveQueue1</span><span class="params">(Message message, Session session)</span> </span>&#123;</div><div class="line">    	<span class="keyword">try</span> &#123;</div><div class="line">			Map&lt;String,String&gt; params = (Map&lt;String,String&gt;)getMessageConverter().fromMessage(message);</div><div class="line">			logger.info(<span class="string">"[queue1消息消费者]接收到的参数params=&#123;&#125;,message=&#123;&#125;,session=&#123;&#125;"</span>, params, message, session);</div><div class="line">			</div><div class="line">			<span class="comment">//TODO 业务逻辑具体实现，如果处理失败，那么可以主动抛出异常，此时消息将保留在此队列中</span></div><div class="line">			</div><div class="line">			<span class="comment">//例如：phoneNo=13925038990时抛出异常</span></div><div class="line">			String phoneNo = params.get(<span class="string">"phoneNo"</span>);</div><div class="line">			<span class="keyword">if</span>(<span class="string">"13925038990"</span>.equals(phoneNo))&#123;</div><div class="line">				session.rollback();</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> JMSException(<span class="string">"业务逻辑处理失败，想让消息让保留在该对队列中可以认为抛出异常！"</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> phoneNo;</div><div class="line">		&#125; <span class="keyword">catch</span> (MessageConversionException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (JMSException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">    	<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">	 * queue2消费方法区</div><div class="line">	 * <span class="doctag">@param</span> message</div><div class="line">	 * <span class="doctag">@param</span> session</div><div class="line">	 */</div><div class="line">    <span class="meta">@JmsListener</span>(destination = <span class="string">"queue2"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveQueue2</span><span class="params">(Message message, Session session)</span> </span>&#123;</div><div class="line">    	<span class="keyword">try</span> &#123;</div><div class="line">			String phoneNo = (String)getMessageConverter().fromMessage(message);</div><div class="line">			logger.info(<span class="string">"[queue2消息消费者]接收到的参数phoneNo=&#123;&#125;,message=&#123;&#125;,session=&#123;&#125;"</span>, phoneNo, message, session);</div><div class="line">			</div><div class="line">			<span class="comment">//TODO 业务逻辑具体实现，如果处理失败，那么可以主动抛出异常，此时消息将保留在此队列中</span></div><div class="line">			</div><div class="line">			<span class="comment">//例如：phoneNo=13925038990时抛出异常</span></div><div class="line">			<span class="keyword">if</span>(<span class="string">"13925038990"</span>.equals(phoneNo))&#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"业务逻辑处理失败，想让消息让保留在该对队列中可以认为抛出异常！"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (MessageConversionException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (JMSException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * MQ死信队列处理</div><div class="line">     * <span class="doctag">@param</span> message</div><div class="line">     * <span class="doctag">@param</span> session</div><div class="line">     * <span class="doctag">@throws</span> JMSException</div><div class="line">     */</div><div class="line">    <span class="meta">@JmsListener</span>(destination = <span class="string">"ActiveMQ.DLQ"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message, Session session)</span> <span class="keyword">throws</span> JMSException </span>&#123;</div><div class="line">    	<span class="keyword">try</span> &#123;</div><div class="line">			Map&lt;String,String&gt; params = (Map&lt;String,String&gt;)getMessageConverter().fromMessage(message);</div><div class="line">			logger.info(<span class="string">"[queue2消息消费者]接收到的参数params=&#123;&#125;,message=&#123;&#125;,session=&#123;&#125;"</span>, params, message, session);</div><div class="line">			</div><div class="line">			<span class="comment">//TODO 业务逻辑具体实现，如果处理失败，那么可以主动抛出异常，此时消息将保留在此队列中</span></div><div class="line">			</div><div class="line">			<span class="comment">//例如：phoneNo=13925038990时抛出异常</span></div><div class="line">			String phoneNo = params.get(<span class="string">"phoneNo"</span>);</div><div class="line">			<span class="keyword">if</span>(<span class="string">"13925038990"</span>.equals(phoneNo))&#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"业务逻辑处理失败，想让消息让保留在该对队列中可以认为抛出异常！"</span>);</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">		&#125; <span class="keyword">catch</span> (MessageConversionException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (JMSException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="7、测试结果"><a href="#7、测试结果" class="headerlink" title="7、测试结果"></a>7、测试结果</h4><p>1、正常情况下处理结果如下：<br>队列1和队列2同时接收到请求，请求先在queue1中处理，处理完成后转发给queue2。<br><img src="/2017/02/25/SpringBoot与ActiveMQ的整合实践/2.png" alt="ActiveMQ控制台"><br><img src="/2017/02/25/SpringBoot与ActiveMQ的整合实践/3.png" alt="STS控制台"></p>
<p>2、异常情况下的处理如下：<br>phoneNo=13925038990时发生异常，尝试多次（默认6次）还不行，则发送到死信队列中。<br><img src="/2017/02/25/SpringBoot与ActiveMQ的整合实践/4.png" alt="ActiveMQ控制台"><br><img src="/2017/02/25/SpringBoot与ActiveMQ的整合实践/5.png" alt="ActiveMQ控制台"></p>
<h4 id="8、总结"><a href="#8、总结" class="headerlink" title="8、总结"></a>8、总结</h4><p>总的来讲，消息队列是任何系统或者引用一个至关重要的组件，它主要有以下几个特性：<br>1、解耦：消息队列在处理过程中间插入了一个隐含的、基于数据的接口层，两边的处理过程都要实现这一接口。这允许你独立的扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束。<br>2、峰值处理能力：在访问量剧增的情况下，你的应用仍然需要继续发挥作用，但是这样的突发流量并不常见；如果为以能处理这类峰值访问为标准来投入资源随时待命无疑是巨大的浪费。使用消息队列能够使关键组件顶住增长的访问压力，而不是因为超出负荷的请求而完全崩溃。<br>3、送达保证：消息队列提供的冗余机制保证了消息能被实际的处理，只有一个进程读取了该队列即可，并且提供了“只送达一次”保证。<br>4、异步通信：消息队列提供了异步处理机制，允许你把一个消息放入队列，但并不立即处理它，你想向队列中放入多少消息就放多少，然后在后续的时候再去处理它们。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2017/02/25/SpringBoot与ActiveMQ的整合实践/1.jpg&quot; alt=&quot;路边的野花&quot;&gt;&lt;/p&gt;
&lt;p&gt;这周以来，广州一直处于阴冷潮湿之中，本以为会东风送暖，春回大地，未曾想到来了一个断崖式的降温，只好把已经装箱的秋衣秋裤给重新翻了出来。好些天没有放晴了，灰色的天，淅沥的雨，肆虐的风这些场景仿佛像是去年的冬天。  &lt;/p&gt;
&lt;p&gt;这段时间为了解决接口的异步调用，学习梳理了一下消息队列（Message Queue）的一些知识，并且已经运用到产品的开发之中。下面就说说SpringBoot如何整合ActiveMQ吧。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://javaer.site/tags/Java/"/>
    
      <category term="SpringBoot" scheme="http://javaer.site/tags/SpringBoot/"/>
    
      <category term="MQ" scheme="http://javaer.site/tags/MQ/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot基于Junit的集成测试</title>
    <link href="http://javaer.site/2017/02/18/SpringBoot%E5%9F%BA%E4%BA%8EJunit%E7%9A%84%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95/"/>
    <id>http://javaer.site/2017/02/18/SpringBoot基于Junit的集成测试/</id>
    <published>2017-02-18T12:58:06.000Z</published>
    <updated>2017-02-18T14:23:42.764Z</updated>
    
    <content type="html"><![CDATA[<p>有人说，如果你不知道要去哪，往前走就是了，因为路就在脚下。但在软件开发领域，如果你没有目标，那么往往是寸步难行。开发出来的程序必是bug漫天，没人用的了。在编写应用程序的时候，明确目标最好的方式就是编写测试用例，确定程序运行过程能否达到自己的预期。  </p>
<p>最近一直采用 SpringBoot+Maven+Thymeleaf 来开发公司的产品，SpringBoot的自动装配、起步依赖的核心特性着实让研发人员减少了各种配置，提高了开发的效率，从而更加专注于业务实现层。</p>
<p>默认情况下，创建 SpringBoot 模板工程，STS会遵循Maven规范同时创建出 src/main/java 和 src/test/java 两个目录。项目构建时，Maven会遵循 <strong>compile-&gt;test-&gt;package-&gt;install</strong> 的顺序依次进行，后面步骤依赖于前一步的执行结果。笔者负责的研发中，对外API、核心的组件进行了测试用例的编写。</p>
<p>Spring 的<code>SpringJunit4ClassRunner</code>可以在基于 JUnit 的应用程序测试里加载 Spring 应用程序上下文，在测试SpringBoot应用程序是，SpringBoot 除了拥有Spring的集成测试支持，它还开启自动配置和Web服务器，并提供了不少使用的测试辅助工具。下面重点讲讲 <code>SpringJunit4ClassRunner</code> 对 Spring 应用程序进行集成测试。<br><a id="more"></a></p>
<h4 id="1、用SpringJunit4Class进行集成测试"><a href="#1、用SpringJunit4Class进行集成测试" class="headerlink" title="1、用SpringJunit4Class进行集成测试"></a>1、用<code>SpringJunit4Class</code>进行集成测试</h4><p>例如以下代码为创建 SpringBoot 工程后自动生成的测试用例，<code>ApplicationTests</code>添加了<code>@RunWith</code>、<code>@SpringApplicationConfiguration</code>和<code>@WebAppConfiguration</code>。<br><code>@RunWith</code>的参数是<code>SpringJunit4ClassRunner.class</code>表示开启了Spring集成测试支持。<br><code>@SpringApplicationConfiguration</code>则声明加载Spring应用程序的上下文，同时还会加载外部属性和Spring Boot日志，总的来说就是加载了完整的SpringBoot。<br><code>@WebAppConfiguration</code>注解声明，则由<code>SpringJunit4ClassRunner</code>创建的上下文应用是一个WebApplicationContext。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> site.javaer.springboot;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.test.SpringApplicationConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.web.WebAppConfiguration;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * 类名称：ApplicationTests</div><div class="line"> * 类描述：</div><div class="line"> * 创建人：lzg</div><div class="line"> * 创建时间：2017年2月18日 下午4:24:09</div><div class="line"> * Copyright (c)： 2017</div><div class="line"> * <span class="doctag">@version</span> 1.0</div><div class="line"> */</div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@SpringApplicationConfiguration</span>(classes = Application.class)</div><div class="line"><span class="meta">@WebAppConfiguration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationTests</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>除了@RunWith、@SpringApplicationConfiguration、@WebAppConfiguration这三个注解完，我们测试中可能还会用上如下一些注解：<br>1、 @ContextConfirguration： 加载Spring应用程序上下文，但并没有加载完整的Spring Boot，只加载指定类的上下文配置。<br>2、 @WebIntegrationTest： 不仅为测试创建上下文，还启动了一个嵌入式Servlet容器，一旦应用程序运行在嵌入式容器里，那就可以发起真实的HTTP请求，断言结果了。  </p>
<h4 id="2、测试web应用程序"><a href="#2、测试web应用程序" class="headerlink" title="2、测试web应用程序"></a>2、测试web应用程序</h4><p>要测试一个Web应用程序，我们需要投入一些实际的HTTP请求，确认它能正确地处理那些请求，SpringBoot为我们提供了两个测试方案：<br>1、 Spring Mock MVC：能在一个近似真实的模拟Servlet容器里测试控制器，而不用实际启动应用服务器。<br>2、 Web集成测试：在嵌入式Servlet容器（比如Tomcat或Jetty）里启动应用程序，在真正的应用服务器里执行测试。<br>这两种方式各有利弊。启动一个引用服务器会比模拟Servlet容器要慢一些，但基于服务器的测试会更接近于真实环境，更接近部署到生产环境运行的情况。  </p>
<h5 id="2-1、模拟Spring-MVC"><a href="#2-1、模拟Spring-MVC" class="headerlink" title="2.1、模拟Spring MVC"></a>2.1、模拟Spring MVC</h5><p>Spring的Mock MVC框架模拟了Spring MVC的很多动能，它几乎和运行在Servlet容器里的应用一样，尽管实际情况并非如此。要在测试代码中创建Mock MVC，可以通过MockMvcBuilders，该类提供了两个静态方法：<br>1、 standaloneSetup()：构建一个Mock MVC，提供一个或者多个手工创建并配置的控制器。<br>2、 webAppContextSetup()： 使用Spring应用程序上下文来构建Mock MVC，该上下文可以包含一个或者多个配置好的控制器。<br>主要区别在于，standaloneSetup()希望你手工初始化并注入你要测试的控制器而webAppContextSetup()则给予一个WebApplicationContext的实例，由Spring加载控制器以及依赖关系，一边进行完整的集成测试。<br>下面举两个例子说明两者的区别：<br>1、standaloneSetup方式测试UserController，UserController没有其他的依赖，如下代码所示:<br><code>UserController.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> site.javaer.springboot.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.Collections;</div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ModelAttribute;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</div><div class="line"></div><div class="line"><span class="keyword">import</span> site.javaer.springboot.vo.User;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * 类名称：UserController</div><div class="line"> * 类描述：用户信息控制层</div><div class="line"> * 创建人：lzg</div><div class="line"> * 创建时间：2017年2月18日 下午5:16:07</div><div class="line"> * Copyright (c)： 2017</div><div class="line"> * <span class="doctag">@version</span> 1.0</div><div class="line"> */</div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, User&gt; users = Collections.synchronizedMap(<span class="keyword">new</span> HashMap&lt;String, User&gt;());	<span class="comment">// 创建线程安全的Map </span></div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取所有的用户列表</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/"</span>, method=RequestMethod.GET) </div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123; </div><div class="line">        List&lt;User&gt; r = <span class="keyword">new</span> ArrayList&lt;User&gt;(users.values()); </div><div class="line">        <span class="keyword">return</span> r; </div><div class="line">    &#125; </div><div class="line"></div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 新增用户数据</div><div class="line">     * <span class="doctag">@param</span> user</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/"</span>, method=RequestMethod.POST) </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">postUser</span><span class="params">(@ModelAttribute User user)</span> </span>&#123; </div><div class="line">        users.put(user.getUserCode(), user); </div><div class="line">        <span class="keyword">return</span> <span class="string">"success"</span>; </div><div class="line">    &#125; </div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 通过用户编码获得用户数据</div><div class="line">     * <span class="doctag">@param</span> userCode	用户编码</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;userCode&#125;"</span>, method=RequestMethod.GET) </div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable String userCode)</span> </span>&#123; </div><div class="line">        <span class="keyword">return</span> users.get(userCode); </div><div class="line">    &#125; </div><div class="line"></div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 修改用户数据</div><div class="line">     * <span class="doctag">@param</span> userCode	用户编码</div><div class="line">     * <span class="doctag">@param</span> user		修改后的数据</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;userCode&#125;"</span>, method=RequestMethod.PUT) </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">putUser</span><span class="params">(@PathVariable String userCode, @ModelAttribute User user)</span> </span>&#123; </div><div class="line">        User u = users.get(userCode); </div><div class="line">        u.setUserName(user.getUserName()); </div><div class="line">        users.put(userCode, u); </div><div class="line">        <span class="keyword">return</span> <span class="string">"success"</span>; </div><div class="line">    &#125; </div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据用户编码删除某一个用户 </div><div class="line">     * <span class="doctag">@param</span> userCode	用户编码</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;userCode&#125;"</span>, method=RequestMethod.DELETE) </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(@PathVariable String userCode)</span> </span>&#123; </div><div class="line">        users.remove(userCode); </div><div class="line">        <span class="keyword">return</span> <span class="string">"success"</span>; </div><div class="line">    &#125; </div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>UserControllerTests.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> site.javaer.springboot.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.Matchers.equalTo;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.junit.Before;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.test.SpringApplicationConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.mock.web.MockServletContext;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.web.WebAppConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.RequestBuilder;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.setup.MockMvcBuilders;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * 类名称：UserControllerTests</div><div class="line"> * 类描述：用户控制测试-standaloneSetup</div><div class="line"> * 创建人：lzg</div><div class="line"> * 创建时间：2017年2月18日 下午5:47:05</div><div class="line"> * Copyright (c)： 2017</div><div class="line"> * <span class="doctag">@version</span> 1.0</div><div class="line"> */</div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@SpringApplicationConfiguration</span>(classes = MockServletContext.class)</div><div class="line"><span class="meta">@WebAppConfiguration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserControllerTests</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> MockMvc mvc;</div><div class="line"></div><div class="line">	<span class="meta">@Before</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="comment">//采用standaloneSetup方式，UserController中不能有其他的依赖，否则会报空指针异常，此种测试方式主要运用于单个方法的测试</span></div><div class="line">		mvc = MockMvcBuilders.standaloneSetup(<span class="keyword">new</span> UserController()).build();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userController</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="comment">// 1、get查一下user列表，list为空</span></div><div class="line">		RequestBuilder request = get(<span class="string">"/users/"</span>);</div><div class="line">		mvc.perform(request).andExpect(status().isOk()).andExpect(content().string(equalTo(<span class="string">"[]"</span>)));</div><div class="line">		</div><div class="line">		<span class="comment">// 2、post提交一个user</span></div><div class="line">		request = post(<span class="string">"/users/"</span>).param(<span class="string">"userCode"</span>, <span class="string">"1001"</span>).param(<span class="string">"userName"</span>, <span class="string">"javaer1"</span>);</div><div class="line">		mvc.perform(request).andExpect(content().string(equalTo(<span class="string">"success"</span>)));</div><div class="line"></div><div class="line">		<span class="comment">// 3、get获取user列表，应该有刚才插入的数据</span></div><div class="line">		request = get(<span class="string">"/users/"</span>);</div><div class="line">		mvc.perform(request).andExpect(status().isOk())</div><div class="line">			.andExpect(content().string(equalTo(<span class="string">"[&#123;\"userCode\":\"1001\",\"userName\":\"javaer1\"&#125;]"</span>)));</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、webAppContextSetup方式测试UserController，UserController依赖UserService，如下代码所示:<br><code>UserController.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> site.javaer.springboot.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ModelAttribute;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</div><div class="line"></div><div class="line"><span class="keyword">import</span> site.javaer.springboot.service.UserService;</div><div class="line"><span class="keyword">import</span> site.javaer.springboot.vo.User;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * 类名称：UserController</div><div class="line"> * 类描述：用户信息控制层</div><div class="line"> * 创建人：lzg</div><div class="line"> * 创建时间：2017年2月18日 下午5:16:07</div><div class="line"> * Copyright (c)： 2017</div><div class="line"> * <span class="doctag">@version</span> 1.0</div><div class="line"> */</div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserService userService;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取所有的用户列表</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/"</span>, method=RequestMethod.GET) </div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123; </div><div class="line">    	<span class="keyword">return</span> userService.getUserList();</div><div class="line">    &#125; </div><div class="line"></div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 新增用户数据</div><div class="line">     * <span class="doctag">@param</span> user</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/"</span>, method=RequestMethod.POST) </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">postUser</span><span class="params">(@ModelAttribute User user)</span> </span>&#123; </div><div class="line">    	userService.postUser(user);</div><div class="line">        <span class="keyword">return</span> <span class="string">"success"</span>; </div><div class="line">    &#125; </div><div class="line">    </div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 通过用户编码获得用户数据</div><div class="line">     * <span class="doctag">@param</span> userCode	用户编码</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;userCode&#125;"</span>, method=RequestMethod.GET) </div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable String userCode)</span> </span>&#123; </div><div class="line">    	<span class="keyword">return</span> userService.getUser(userCode);</div><div class="line">    &#125; </div><div class="line"></div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 修改用户数据</div><div class="line">     * <span class="doctag">@param</span> userCode	用户编码</div><div class="line">     * <span class="doctag">@param</span> user		修改后的数据</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;userCode&#125;"</span>, method=RequestMethod.PUT) </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">putUser</span><span class="params">(@PathVariable String userCode, @ModelAttribute User user)</span> </span>&#123;</div><div class="line">    	userService.putUser(userCode,user);</div><div class="line">        <span class="keyword">return</span> <span class="string">"success"</span>; </div><div class="line">    &#125; </div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据用户编码删除某一个用户 </div><div class="line">     * <span class="doctag">@param</span> userCode	用户编码</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;userCode&#125;"</span>, method=RequestMethod.DELETE) </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(@PathVariable String userCode)</span> </span>&#123; </div><div class="line">        userService.remove(userCode);</div><div class="line">        <span class="keyword">return</span> <span class="string">"success"</span>; </div><div class="line">    &#125; </div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>UserService.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> site.javaer.springboot.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.Collections;</div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> site.javaer.springboot.vo.User;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * 类名称：UserService</div><div class="line"> * 类描述：用户服务层</div><div class="line"> * 创建人：lzg</div><div class="line"> * 创建时间：2017年2月18日 下午7:09:23</div><div class="line"> * Copyright (c)： 2017</div><div class="line"> * <span class="doctag">@version</span> 1.0</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, User&gt; users = Collections.synchronizedMap(<span class="keyword">new</span> HashMap&lt;String, User&gt;());	<span class="comment">// 创建线程安全的Map</span></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取用户列表</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123; </div><div class="line">		List&lt;User&gt; r = <span class="keyword">new</span> ArrayList&lt;User&gt;(users.values()); </div><div class="line">        <span class="keyword">return</span> r; </div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 新增用户</div><div class="line">	 * <span class="doctag">@param</span> user</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postUser</span><span class="params">(User user)</span></span>&#123;</div><div class="line">        users.put(user.getUserCode(), user); </div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据userCode获得用户对象</div><div class="line">	 * <span class="doctag">@param</span> userCode</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(String userCode)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> users.get(userCode);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 更新用户信息</div><div class="line">	 * <span class="doctag">@param</span> userCode</div><div class="line">	 * <span class="doctag">@param</span> user</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putUser</span><span class="params">(String userCode,User user)</span></span>&#123;</div><div class="line">		User u = users.get(userCode); </div><div class="line">        u.setUserName(user.getUserName()); </div><div class="line">        users.put(userCode, u);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 删除某一个用户信息</div><div class="line">	 * <span class="doctag">@param</span> userCode</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(String userCode)</span></span>&#123;</div><div class="line">        users.remove(userCode);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>UserControllerTests.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> site.javaer.springboot.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.Matchers.equalTo;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.junit.Before;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.test.SpringApplicationConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.web.WebAppConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.RequestBuilder;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.setup.MockMvcBuilders;</div><div class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</div><div class="line"></div><div class="line"><span class="keyword">import</span> site.javaer.springboot.Application;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * 类名称：UserControllerTests</div><div class="line"> * 类描述：用户控制测试-webAppContextSetup</div><div class="line"> * 创建人：lzg</div><div class="line"> * 创建时间：2017年2月18日 下午5:47:05</div><div class="line"> * Copyright (c)： 2017</div><div class="line"> * <span class="doctag">@version</span> 1.0</div><div class="line"> */</div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@SpringApplicationConfiguration</span>(classes = Application.class)	<span class="comment">//此处修改为Application</span></div><div class="line"><span class="meta">@WebAppConfiguration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserControllerTests</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> MockMvc mvc;</div><div class="line">	</div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="keyword">private</span> WebApplicationContext webContext;	<span class="comment">//注入WebApplicationContext</span></div><div class="line"></div><div class="line">	<span class="meta">@Before</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="comment">//UserController依赖UserService，mvc构建webAppContextSetup会启动SpringBoot的配置</span></div><div class="line">		mvc = MockMvcBuilders.webAppContextSetup(webContext).build();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userController</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="comment">// 1、get查一下user列表，list为空</span></div><div class="line">		RequestBuilder request = get(<span class="string">"/users/"</span>);</div><div class="line">		mvc.perform(request).andExpect(status().isOk()).andExpect(content().string(equalTo(<span class="string">"[]"</span>)));</div><div class="line">		</div><div class="line">		<span class="comment">// 2、post提交一个user</span></div><div class="line">		request = post(<span class="string">"/users/"</span>).param(<span class="string">"userCode"</span>, <span class="string">"1001"</span>).param(<span class="string">"userName"</span>, <span class="string">"javaer1"</span>);</div><div class="line">		mvc.perform(request).andExpect(content().string(equalTo(<span class="string">"success"</span>)));</div><div class="line"></div><div class="line">		<span class="comment">// 3、get获取user列表，应该有刚才插入的数据</span></div><div class="line">		request = get(<span class="string">"/users/"</span>);</div><div class="line">		mvc.perform(request).andExpect(status().isOk())</div><div class="line">			.andExpect(content().string(equalTo(<span class="string">"[&#123;\"userCode\":\"1001\",\"userName\":\"javaer1\"&#125;]"</span>)));</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="2-2、多线程测试"><a href="#2-2、多线程测试" class="headerlink" title="2.2、多线程测试"></a>2.2、多线程测试</h5><p>写过Junit单元测试的同学应该会有感觉，Junit本身是不支持普通的多线程测试的，这是因为Junit的底层实现上，是用System.exit退出用例执行的。JVM都终止了，在测试线程启动的其他线程自然也无法执行。当我们碰到类似的问题的时候别人也一定碰到过该问题，google之后发现已经存在着类似的开源框架，笔者通过<a href="http://groboutils.sourceforge.net/index.html" target="_blank" rel="external">groboutils</a>工具包来实现多线程的测试。在Maven仓库找了一下并没有找到相关的坐标，于是乎笔者从<a href="http://groboutils.sourceforge.net/index.html" target="_blank" rel="external">http://groboutils.sourceforge.net/index.html</a> 下载下jar之后上传到自己建的Maven私服中，然后通过坐标引用。<br><code>UserControllerMultiThreadedTests.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> site.javaer.springboot.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.Matchers.equalTo;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.junit.Before;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.test.SpringApplicationConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.web.WebAppConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.RequestBuilder;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.setup.MockMvcBuilders;</div><div class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</div><div class="line"></div><div class="line"><span class="keyword">import</span> net.sourceforge.groboutils.junit.v1.MultiThreadedTestRunner;</div><div class="line"><span class="keyword">import</span> net.sourceforge.groboutils.junit.v1.TestRunnable;</div><div class="line"><span class="keyword">import</span> site.javaer.springboot.Application;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * 类名称：UserControllerMultiThreadedTests</div><div class="line"> * 类描述：用户控制测试</div><div class="line"> * 创建人：lzg</div><div class="line"> * 创建时间：2017年2月18日 下午5:47:05</div><div class="line"> * Copyright (c)： 2017</div><div class="line"> * <span class="doctag">@version</span> 1.0</div><div class="line"> */</div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@SpringApplicationConfiguration</span>(classes = Application.class)</div><div class="line"><span class="meta">@WebAppConfiguration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserControllerMultiThreadedTests</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> MockMvc mvc;</div><div class="line">	</div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="keyword">private</span> WebApplicationContext webContext;	<span class="comment">//注入WebApplicationContext</span></div><div class="line"></div><div class="line">	<span class="meta">@Before</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		mvc = MockMvcBuilders.webAppContextSetup(webContext).build();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userController</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		 <span class="comment">//1.Runner数组，想当于并发多少个。 </span></div><div class="line">        TestRunnable[] trs = <span class="keyword">new</span> TestRunnable [<span class="number">10</span>];  </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i= <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;  </div><div class="line">            trs[i] = <span class="keyword">new</span> UserThread();  </div><div class="line">        &#125;  </div><div class="line">        <span class="comment">//2.用于执行多线程测试用例的Runner，将前面定义的单个Runner组成的数组传入 </span></div><div class="line">        MultiThreadedTestRunner mttr = <span class="keyword">new</span> MultiThreadedTestRunner(trs);</div><div class="line">        </div><div class="line">        <span class="comment">// 开发并发执行数组里定义的内容 </span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">			mttr.runTestRunnables();</div><div class="line">		&#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">UserThread</span> <span class="keyword">extends</span> <span class="title">TestRunnable</span> </span>&#123;  </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runTest</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;  </div><div class="line">        	<span class="comment">// 1、get查一下user列表，list为空</span></div><div class="line">    		RequestBuilder request = get(<span class="string">"/users/"</span>);</div><div class="line">    		mvc.perform(request).andExpect(status().isOk()).andExpect(content().string(equalTo(<span class="string">"[]"</span>)));</div><div class="line">    		</div><div class="line">    		<span class="comment">// 2、post提交一个user</span></div><div class="line">    		request = post(<span class="string">"/users/"</span>).param(<span class="string">"userCode"</span>, <span class="string">"1001"</span>).param(<span class="string">"userName"</span>, <span class="string">"javaer1"</span>);</div><div class="line">    		mvc.perform(request).andExpect(content().string(equalTo(<span class="string">"success"</span>)));</div><div class="line"></div><div class="line">    		<span class="comment">// 3、get获取user列表，应该有刚才插入的数据</span></div><div class="line">    		request = get(<span class="string">"/users/"</span>);</div><div class="line">    		mvc.perform(request).andExpect(status().isOk())</div><div class="line">    			.andExpect(content().string(equalTo(<span class="string">"[&#123;\"userCode\":\"1001\",\"userName\":\"javaer1\"&#125;]"</span>)));</div><div class="line">        &#125;  </div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="2-3、测试运行中的应用程序"><a href="#2-3、测试运行中的应用程序" class="headerlink" title="2.3、测试运行中的应用程序"></a>2.3、测试运行中的应用程序</h5><p>@WebIntegrationTest不仅希望SpringBoot为测试创建上下文，还要启动一个嵌入式的Servlet容器，一旦应用程序运行在嵌入式容器里，你就可以发送真实的Http请求，断言结果。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> site.javaer.springboot.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.test.SpringApplicationConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.test.WebIntegrationTest;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</div><div class="line"></div><div class="line"><span class="keyword">import</span> site.javaer.springboot.Application;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * 类名称：UserControllerIntegrationTests</div><div class="line"> * 创建人：lzg</div><div class="line"> * 创建时间：2017年2月18日 下午8:29:29</div><div class="line"> * Copyright (c)： 2017</div><div class="line"> * <span class="doctag">@version</span> 1.0</div><div class="line"> */</div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@SpringApplicationConfiguration</span>(classes=Application.class)</div><div class="line"><span class="meta">@WebIntegrationTest</span>(randomPort=<span class="keyword">true</span>)	<span class="comment">//随机端口测试</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserControllerIntegrationTests</span> </span>&#123;</div><div class="line">	<span class="comment">//注入随机端口</span></div><div class="line">	<span class="meta">@Value</span>(<span class="string">"$&#123;local.server.port&#125;"</span>)</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> port;</div><div class="line">	</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		RestTemplate rest = <span class="keyword">new</span> RestTemplate();</div><div class="line">		rest.getForObject(<span class="string">"http://localhost:&#123;port&#125;/users/"</span>, String.class, port).equals(<span class="string">"[]"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>总的来说，SpringBoot与JUnit的集成测试还是非常简单、人性化的，配置的加载、依赖的注入，SpringBoot都给了很好的插件支持。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有人说，如果你不知道要去哪，往前走就是了，因为路就在脚下。但在软件开发领域，如果你没有目标，那么往往是寸步难行。开发出来的程序必是bug漫天，没人用的了。在编写应用程序的时候，明确目标最好的方式就是编写测试用例，确定程序运行过程能否达到自己的预期。  &lt;/p&gt;
&lt;p&gt;最近一直采用 SpringBoot+Maven+Thymeleaf 来开发公司的产品，SpringBoot的自动装配、起步依赖的核心特性着实让研发人员减少了各种配置，提高了开发的效率，从而更加专注于业务实现层。&lt;/p&gt;
&lt;p&gt;默认情况下，创建 SpringBoot 模板工程，STS会遵循Maven规范同时创建出 src/main/java 和 src/test/java 两个目录。项目构建时，Maven会遵循 &lt;strong&gt;compile-&amp;gt;test-&amp;gt;package-&amp;gt;install&lt;/strong&gt; 的顺序依次进行，后面步骤依赖于前一步的执行结果。笔者负责的研发中，对外API、核心的组件进行了测试用例的编写。&lt;/p&gt;
&lt;p&gt;Spring 的&lt;code&gt;SpringJunit4ClassRunner&lt;/code&gt;可以在基于 JUnit 的应用程序测试里加载 Spring 应用程序上下文，在测试SpringBoot应用程序是，SpringBoot 除了拥有Spring的集成测试支持，它还开启自动配置和Web服务器，并提供了不少使用的测试辅助工具。下面重点讲讲 &lt;code&gt;SpringJunit4ClassRunner&lt;/code&gt; 对 Spring 应用程序进行集成测试。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://javaer.site/tags/Java/"/>
    
      <category term="SpringBoot" scheme="http://javaer.site/tags/SpringBoot/"/>
    
      <category term="Junit" scheme="http://javaer.site/tags/Junit/"/>
    
  </entry>
  
  <entry>
    <title>MySQL锁机制实践</title>
    <link href="http://javaer.site/2017/02/11/MySQL%E9%94%81%E6%9C%BA%E5%88%B6%E5%AE%9E%E8%B7%B5/"/>
    <id>http://javaer.site/2017/02/11/MySQL锁机制实践/</id>
    <published>2017-02-11T07:39:07.000Z</published>
    <updated>2017-02-11T07:50:34.537Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最近几天项目上遇到一个需求，现有系统需要访问外部的API，而API提供方的鉴权方式 ，需要三个步骤：<br>1.访问签名接口1获取授权编码（authCode），authCode有效期10s，authCode在生命周期内无法重复获取且只能使用一次；<br>2.根据授权编码生成加密后的数字签名；<br>3.根据授权编码、数字签名访问接口2获得令牌token，token有效期20分钟；<br>业务接口访问带上token值完成鉴权认证，考虑到系统采用的是集群部署，无法在应用层面保证数据的一致性，为此考虑采用MySQL的锁机制进行实现，正好系统的学习一下MySQL的锁机制。 </p>
</blockquote>
<h4 id="1、MySQL锁概述"><a href="#1、MySQL锁概述" class="headerlink" title="1、MySQL锁概述"></a>1、MySQL锁概述</h4><p>相对其他数据库而言，MySQL的锁机制比较简单，其最显著的特点是不同的存储引擎支持不同的锁机制。比如，<code>MyISAM</code>和<code>MEMORY</code>存储引擎采用的是表级锁（<code>table-level locking</code>）；<code>BDB</code>存储引擎采用的是页面锁（<code>page-level locking</code>），但也支持表级锁；<code>InnoDB</code>存储引擎既支持行级锁（<code>row-level locking</code>），也支持表级锁，但默认情况下是采用行级锁，目前本系统采用到的存储引擎为<code>InnoDB</code>。  </p>
<p>从锁的粒度层面MySQL分为表级锁、页面锁、行级锁三种形式。三种形式在系统开销、加锁速度、是否出现死锁、并发性能、锁的粒度都不太一样，如下表格所示：</p>
<table>
<thead>
<tr>
<th style="text-align:center">锁类型</th>
<th style="text-align:center">系统开销</th>
<th style="text-align:center">加锁速度</th>
<th style="text-align:center">死锁</th>
<th style="text-align:center">并发性能</th>
<th style="text-align:center">锁的粒度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">表级锁</td>
<td style="text-align:center">系统开销小</td>
<td style="text-align:center">加锁快</td>
<td style="text-align:center">不死锁</td>
<td style="text-align:center">并发底</td>
<td style="text-align:center">锁的粒度大</td>
</tr>
<tr>
<td style="text-align:center">页面锁</td>
<td style="text-align:center">两者之间</td>
<td style="text-align:center">两者之间</td>
<td style="text-align:center">会死锁</td>
<td style="text-align:center">两者之间</td>
<td style="text-align:center">两者之间</td>
</tr>
<tr>
<td style="text-align:center">行级锁</td>
<td style="text-align:center">系统开销大</td>
<td style="text-align:center">加锁慢</td>
<td style="text-align:center">会死锁</td>
<td style="text-align:center">并发高</td>
<td style="text-align:center">锁的粒度小</td>
</tr>
</tbody>
</table>
<p>从上述特点可见，从锁的角度来说：表级锁更适合于以查询为主，只有少量按索引条件更新数据的应用，如Web查询类应用；而行级锁则更适合于有大量按索引条件并发更新少量不同数据，同时又有并发查询的应用，如一些在线事务处理系统。下面重点介绍MySQL基于<code>InnoDB</code>的锁机制。</p>
<a id="more"></a>
<h4 id="2、InnoDB锁机制"><a href="#2、InnoDB锁机制" class="headerlink" title="2、InnoDB锁机制"></a>2、InnoDB锁机制</h4><p>InnoDB与MyISAM的最大不同有两点：一是支持事务（TRANSACTION）；二是采用了行级锁。行级锁与表级锁本来就有许多不同之处，另外，事务的引入也带来了一些新问题。下面我们先介绍一点背景知识，然后详细讨论InnoDB的锁问题。</p>
<h5 id="2-1、事务的ACID属性"><a href="#2-1、事务的ACID属性" class="headerlink" title="2.1、事务的ACID属性"></a>2.1、事务的ACID属性</h5><ol>
<li>原子性：<br>事务是一个原子操作单元，其对数据的修改，要么全都执行，要么全都不执行。  </li>
<li>一致性：<br>在事务开始和完成时，数据都必须保持一致状态。这意味着所有相关的数据规则都必须应用于事务的修改，以保持数据的完整性；事务结束时，所有的内部数据结构（如B树索引或双向链表）也都必须是正确的。</li>
<li>隔离性：<br>数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的“独立”环境执行。这意味着事务处理过程中的中间状态对外部是不可见的，反之亦然。</li>
<li>持久性：<br>事务完成之后，它对于数据的修改是永久性的，即使出现系统故障也能够保持。<h5 id="2-2、应用并发带来的问题"><a href="#2-2、应用并发带来的问题" class="headerlink" title="2.2、应用并发带来的问题"></a>2.2、应用并发带来的问题</h5></li>
<li>数据丢失<br>当两个或多个事务选择同一行，然后基于最初选定的值更新该行时，由于每个事务都不知道其他事务的存在，就会发生丢失更新问题，最后的更新覆盖了由其他事务所做的更新。<br>举个栗子：两个线程同时更改某一行数据，线程1先读取某一行数据，此时线程2也同时读取了该行数数据，线程1对该数据的某一个字段进行+1的操作，线程2也对该字段进行+1的操作，数据库将保留最后一个线程的数据，如果能做到1个线程在修改数据且没有提交事务之前，另一个线程不能访问该数据，则可避免此问题。</li>
<li>读脏数据<br>一个事务正在对一条记录做修改，在这个事务完成并提交前，这条记录的数据就处于不一致状态；这时，另一个事务也来读取同一条记录，如果不加控制，第二个事务读取了这些“脏”数据，并据此做进一步的处理，就会产生未提交的数据依赖关系。这种现象被形象地叫做”脏读”。</li>
<li>不可重复读<br>一个事务在读取某些数据后的某个时间，再次读取以前读过的数据，却发现其读出的数据已经发生了改变、或某些记录已经被删除了！这种现象就叫做“不可重复读”。</li>
<li>幻读<br>一个事务按相同的查询条件重新读取以前检索过的数据，却发现其他事务插入了满足其查询条件的新数据，这种现象就称为“幻读”。<h5 id="2-3、InnoDB行锁争用情况"><a href="#2-3、InnoDB行锁争用情况" class="headerlink" title="2.3、InnoDB行锁争用情况"></a>2.3、InnoDB行锁争用情况</h5>通过检查InnoDB_row_lock状态变量来分析系统上的行锁的争夺情况：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show status like <span class="string">'innodb_row_lock%'</span>;</div><div class="line">+-------------------------------+-------+</div><div class="line">| Variable_name                 | Value |</div><div class="line">+-------------------------------+-------+</div><div class="line">| Innodb_row_lock_current_waits | 0     |</div><div class="line">| Innodb_row_lock_time          | 0     |</div><div class="line">| Innodb_row_lock_time_avg      | 0     |</div><div class="line">| Innodb_row_lock_time_max      | 0     |</div><div class="line">| Innodb_row_lock_waits         | 0     |</div><div class="line">+-------------------------------+-------+</div><div class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</div></pre></td></tr></table></figure>
</li>
</ol>
<p>还可以通过设置InnoDB Monitors来进一步观察发生锁冲突的表、数据行等，并分析锁争用的原因。<br>具体方法如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mysql&gt; use mysql;</div><div class="line">Database changed</div><div class="line">mysql&gt; CREATE TABLE innodb_monitor(a INT) ENGINE=INNODB;</div><div class="line">Query OK, 0 rows affected (0.09 sec)</div></pre></td></tr></table></figure></p>
<p>然后就可以用下面的语句来进行查看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show innodb status\G;</div><div class="line">*************************** 1. row ***************************</div><div class="line">Status:</div><div class="line">=====================================</div><div class="line">170211 13:46:24 INNODB MONITOR OUTPUT</div><div class="line">=====================================</div><div class="line">Per second averages calculated from the last 1 seconds</div><div class="line">----------</div><div class="line">SEMAPHORES</div><div class="line">----------</div><div class="line">OS WAIT ARRAY INFO: reservation count 3, signal count 3</div><div class="line">Mutex spin waits 0, rounds 20, OS waits 0</div><div class="line">RW-shared spins 6, OS waits 3; RW-excl spins 0, OS waits 0</div></pre></td></tr></table></figure></p>
<p>监视器可以通过下列命令来停止查看：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt; DROP TABLE innodb_monitor;</div><div class="line">Query OK, 0 rows affected (0.05 sec)</div></pre></td></tr></table></figure></p>
<p>设置监视器后，在SHOW INNODB STATUS的显示内容中，会有详细的当前锁等待的信息，包括表名、锁类型、锁定记录的情况等，便于进行进一步的分析和问题的确定。打开监视器以后，默认情况下每15秒会向日志中记录监控的内容，如果长时间打开会导致.err文件变得非常的巨大，所以用户在确认问题原因之后，要记得删除监控表以关闭监视器，或者通过使用“–console”选项来启动服务器以关闭写日志文件。</p>
<h5 id="2-4、InnoDB的两种锁形式"><a href="#2-4、InnoDB的两种锁形式" class="headerlink" title="2.4、InnoDB的两种锁形式"></a>2.4、InnoDB的两种锁形式</h5><p>创建测试用到的库表：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">mysql&gt; create database lock_test;</div><div class="line">Query OK, 1 row affected (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; use lock_test;</div><div class="line">Database changed</div><div class="line">mysql&gt; create table user(</div><div class="line">    -&gt;  user_id         int             comment <span class="string">'用户id'</span> primary key,</div><div class="line">    -&gt;  user_name       varchar(30) comment <span class="string">'用户姓名'</span>,</div><div class="line">    -&gt;  phone_no        varchar(20) comment <span class="string">'用户手机号码'</span></div><div class="line">    -&gt; );</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; insert into user(`user_id`,`user_name`,`phone_no`) values (1, <span class="string">'javaer1'</span>, <span class="string">'13925038990'</span>);</div><div class="line">Query OK, 1 row affected (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; insert into user(`user_id`,`user_name`,`phone_no`) values (2, <span class="string">'javaer2'</span>, <span class="string">'13316037190'</span>);</div><div class="line">Query OK, 1 row affected (0.00 sec)</div></pre></td></tr></table></figure></p>
<ol>
<li>1、共享锁：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM table_name WHERE ... LOCK IN SHARE MODE;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>用SELECT … IN SHARE MODE获得共享锁，主要用在需要数据依存关系时来确认某行记录是否存在，并确保没有人对这个记录进行UPDATE或者DELETE操作。但是如果当前事务也需要对该记录进行更新操作，则很有可能造成死锁，对于锁定行记录后需要进行更新操作的应用，应该使用SELECT… FOR UPDATE方式获得排他锁。</p>
<table>
<thead>
<tr>
<th style="text-align:left">session1</th>
<th style="text-align:left">session2</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><img src="/2017/02/11/MySQL锁机制实践/1.png" alt="Mou icon"></td>
<td style="text-align:left"><img src="/2017/02/11/MySQL锁机制实践/2.png" alt="Mou icon"></td>
</tr>
<tr>
<td style="text-align:left"><img src="/2017/02/11/MySQL锁机制实践/3.png" alt="Mou icon"></td>
<td style="text-align:left">不做任何操作</td>
</tr>
<tr>
<td style="text-align:left">不做任何操作</td>
<td style="text-align:left"><img src="/2017/02/11/MySQL锁机制实践/4.png" alt="Mou icon"></td>
</tr>
<tr>
<td style="text-align:left">等待锁<img src="/2017/02/11/MySQL锁机制实践/5.png" alt="Mou icon"></td>
<td style="text-align:left">不做任何操作</td>
</tr>
<tr>
<td style="text-align:left">不做任何操作</td>
<td style="text-align:left">死锁退出<img src="/2017/02/11/MySQL锁机制实践/6.png" alt="Mou icon"></td>
</tr>
<tr>
<td style="text-align:left">获得锁后，可以成功更新<img src="/2017/02/11/MySQL锁机制实践/7.png" alt="Mou icon"></td>
<td style="text-align:left">不做任何操作</td>
</tr>
</tbody>
</table>
<ol>
<li>2、排他锁<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM table_name WHERE ... FOR UPDATE</div></pre></td></tr></table></figure>
</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:left">session1</th>
<th style="text-align:left">session2</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><img src="/2017/02/11/MySQL锁机制实践/1.png" alt="Mou icon"></td>
<td style="text-align:left"><img src="/2017/02/11/MySQL锁机制实践/1.png" alt="Mou icon"></td>
</tr>
<tr>
<td style="text-align:left">对user_id=1的记录添加排他锁<img src="/2017/02/11/MySQL锁机制实践/8.png" alt="Mou icon"></td>
<td style="text-align:left">不做任何操作</td>
</tr>
<tr>
<td style="text-align:left">不做任何操作</td>
<td style="text-align:left">能够查询数据，但是不能加排他锁，否则会挂起等待<img src="/2017/02/11/MySQL锁机制实践/9.png" alt="Mou icon"></td>
</tr>
<tr>
<td style="text-align:left">执行更新，并且做commit<img src="/2017/02/11/MySQL锁机制实践/10.png" alt="Mou icon"></td>
<td style="text-align:left">不做任何操作</td>
</tr>
<tr>
<td style="text-align:left">不做任何操作</td>
<td style="text-align:left">获得锁，执行查询语句<img src="/2017/02/11/MySQL锁机制实践/11.png" alt="Mou icon"></td>
</tr>
</tbody>
</table>
<p>注意事项：InnoDB行锁是通过给索引上的索引项加锁来实现的，这一点MySQL与Oracle不同，后者是通过在数据块中对相应数据行加锁来实现的。InnoDB这种行锁实现特点意味着：只有通过索引条件检索数据，InnoDB才使用行级锁，否则，InnoDB将使用表锁！<br>在实际应用中，要特别注意InnoDB行锁的这一特性，不然的话，可能导致大量的锁冲突，从而影响并发性能。</p>
<h4 id="3、实际应用"><a href="#3、实际应用" class="headerlink" title="3、实际应用"></a>3、实际应用</h4><ol>
<li>1、将authCode、Token存储在数据库中，作为一行记录存储；</li>
<li>2、每次查询数据库时加上排他锁，如果过期再去调用接口重新获取；</li>
<li>3、简化后的部分代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getToken</span><span class="params">(String logId)</span> </span>&#123;</div><div class="line">	logger.info(<span class="string">"[xxx接口调用-刷新token值]刷新token值开始，logId=&#123;&#125;"</span>, logId);</div><div class="line">	String token = <span class="string">""</span>;</div><div class="line">	DataSource ds = getJdbc().getDataSource();</div><div class="line">	PreparedStatement pst = <span class="keyword">null</span>;</div><div class="line">	ResultSet rs = <span class="keyword">null</span>;</div><div class="line">    Connection conn = <span class="keyword">null</span>;</div><div class="line">	String querySql = <span class="string">"select t.*,TIMESTAMPDIFF(SECOND, '1970-01-01 00:00:00', t.TOKEN_EXPIRE_TIME) AS TOKEN_EXPIRE_TIME_SECOND, TIMESTAMPDIFF(SECOND, '1970-01-01 00:00:00', now()) AS NOW_SECOND from xxx as t where t.ID='1' for update"</span>;</div><div class="line">	<span class="keyword">try</span>&#123;</div><div class="line">		conn = ds.getConnection();</div><div class="line">		conn.setAutoCommit(<span class="keyword">false</span>);</div><div class="line">		pst = conn.prepareStatement(querySql);</div><div class="line">		rs = pst.executeQuery(querySql);</div><div class="line">		</div><div class="line">		<span class="keyword">if</span>(<span class="keyword">null</span> != rs &amp;&amp; rs.next())&#123;</div><div class="line">			<span class="comment">//1.判断token是否过期</span></div><div class="line">			<span class="keyword">boolean</span> isExpire = <span class="keyword">true</span>;</div><div class="line">			<span class="keyword">int</span> tokenExpireTimeSecond = rs.getInt(<span class="string">"TOKEN_EXPIRE_TIME_SECOND"</span>);</div><div class="line">			<span class="keyword">int</span> nowSecond = rs.getInt(<span class="string">"NOW_SECOND"</span>);</div><div class="line">			</div><div class="line">			<span class="comment">//2.token过期时间、当前时间</span></div><div class="line">			<span class="keyword">if</span>((tokenExpireTimeSecond - nowSecond  - <span class="number">60</span>) &gt; <span class="number">0</span> )&#123;</div><div class="line">				isExpire = <span class="keyword">false</span>;</div><div class="line">				token = rs.getString(<span class="string">"TOKEN_DATA"</span>);</div><div class="line">				<span class="keyword">return</span> token;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			<span class="comment">//TODO 3.获取authMap和tokenMap</span></div><div class="line">			Map&lt;String,Object&gt; tokenMap = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</div><div class="line">			Map&lt;String,Object&gt; authCodeMap = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</div><div class="line">			token = (String)tokenMap.get(<span class="string">"tokenData"</span>);</div><div class="line">			<span class="keyword">if</span>(isExpire)&#123;</div><div class="line">				String updateSql = <span class="string">"update xx set PUBLIC_KEY=? where ID = 1"</span>;</div><div class="line">				pst = conn.prepareStatement(updateSql);</div><div class="line">				pst.setString(<span class="number">1</span>, CommonUtil.nullToString(authCodeMap.get(<span class="string">"publicKey"</span>)));		<span class="comment">//PUBLIC_KEY</span></div><div class="line">				pst.executeUpdate();</div><div class="line">			&#125;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">				</div><div class="line">			<span class="comment">//TODO 调用接口获取authCode和token数据信息，然后做新增插入操作</span></div><div class="line">			StringBuffer insertSql = <span class="keyword">new</span> StringBuffer(<span class="string">"insert into xxx (xx,xxx) values (?,?)"</span>);</div><div class="line">			pst = conn.prepareStatement(insertSql.toString());</div><div class="line">			pst.setString(<span class="number">1</span>, <span class="string">"1"</span>);		<span class="comment">//ID</span></div><div class="line">			pst.setString(<span class="number">2</span>, <span class="string">"xxx"</span>);	<span class="comment">//PUBLIC_KEY</span></div><div class="line">			pst.executeUpdate();</div><div class="line">		&#125;</div><div class="line">		conn.commit();</div><div class="line">		</div><div class="line">	&#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">		token = <span class="string">""</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">if</span>(<span class="keyword">null</span> != conn)&#123;</div><div class="line">				conn.rollback();</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (SQLException e1) &#123;</div><div class="line">			e1.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		logger.error(<span class="string">"[xxx接口调用-刷新token值]出现异常，logId=&#123;&#125;，trace="</span>+e, logId);</div><div class="line">	&#125; <span class="keyword">finally</span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">if</span>(<span class="keyword">null</span> != rs)&#123;</div><div class="line">				rs.close();</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>(<span class="keyword">null</span> != pst)&#123;</div><div class="line">				pst.close();</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>(<span class="keyword">null</span> != conn)&#123;</div><div class="line">				conn.close();</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> token;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>周末闲来无事，Mark一下，也算学习的笔记啦。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近几天项目上遇到一个需求，现有系统需要访问外部的API，而API提供方的鉴权方式 ，需要三个步骤：&lt;br&gt;1.访问签名接口1获取授权编码（authCode），authCode有效期10s，authCode在生命周期内无法重复获取且只能使用一次；&lt;br&gt;2.根据授权编码生成加密后的数字签名；&lt;br&gt;3.根据授权编码、数字签名访问接口2获得令牌token，token有效期20分钟；&lt;br&gt;业务接口访问带上token值完成鉴权认证，考虑到系统采用的是集群部署，无法在应用层面保证数据的一致性，为此考虑采用MySQL的锁机制进行实现，正好系统的学习一下MySQL的锁机制。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;1、MySQL锁概述&quot;&gt;&lt;a href=&quot;#1、MySQL锁概述&quot; class=&quot;headerlink&quot; title=&quot;1、MySQL锁概述&quot;&gt;&lt;/a&gt;1、MySQL锁概述&lt;/h4&gt;&lt;p&gt;相对其他数据库而言，MySQL的锁机制比较简单，其最显著的特点是不同的存储引擎支持不同的锁机制。比如，&lt;code&gt;MyISAM&lt;/code&gt;和&lt;code&gt;MEMORY&lt;/code&gt;存储引擎采用的是表级锁（&lt;code&gt;table-level locking&lt;/code&gt;）；&lt;code&gt;BDB&lt;/code&gt;存储引擎采用的是页面锁（&lt;code&gt;page-level locking&lt;/code&gt;），但也支持表级锁；&lt;code&gt;InnoDB&lt;/code&gt;存储引擎既支持行级锁（&lt;code&gt;row-level locking&lt;/code&gt;），也支持表级锁，但默认情况下是采用行级锁，目前本系统采用到的存储引擎为&lt;code&gt;InnoDB&lt;/code&gt;。  &lt;/p&gt;
&lt;p&gt;从锁的粒度层面MySQL分为表级锁、页面锁、行级锁三种形式。三种形式在系统开销、加锁速度、是否出现死锁、并发性能、锁的粒度都不太一样，如下表格所示：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;锁类型&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;系统开销&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;加锁速度&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;死锁&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;并发性能&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;锁的粒度&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;表级锁&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;系统开销小&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;加锁快&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;不死锁&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;并发底&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;锁的粒度大&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;页面锁&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;两者之间&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;两者之间&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;会死锁&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;两者之间&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;两者之间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;行级锁&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;系统开销大&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;加锁慢&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;会死锁&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;并发高&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;锁的粒度小&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;从上述特点可见，从锁的角度来说：表级锁更适合于以查询为主，只有少量按索引条件更新数据的应用，如Web查询类应用；而行级锁则更适合于有大量按索引条件并发更新少量不同数据，同时又有并发查询的应用，如一些在线事务处理系统。下面重点介绍MySQL基于&lt;code&gt;InnoDB&lt;/code&gt;的锁机制。&lt;/p&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://javaer.site/tags/MySQL/"/>
    
      <category term="Java" scheme="http://javaer.site/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>新年</title>
    <link href="http://javaer.site/2017/01/27/%E6%96%B0%E5%B9%B4/"/>
    <id>http://javaer.site/2017/01/27/新年/</id>
    <published>2017-01-27T09:22:25.000Z</published>
    <updated>2017-01-27T12:43:48.869Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>旧历的年底毕竟最像年底，村镇上不必说，就在天空中也显出将到新年的气象来。灰白色的沉重的晚云中间时时发出闪光，接着一声钝响，是送灶的爆竹；近处燃放的可就更强烈了，震耳的大音还没有息，空气里已经散满了幽微的火药香。《祝福》-鲁迅  </p>
</blockquote>
<p>93年前鲁镇过年场景大致也与我们这边的习俗也类似吧？！天空中烟花声、爆竹声此起彼伏，夹杂着远处、近处的回声，一层一层的萦绕在耳边。  </p>
<p>爆竹声中一岁除，春风送暖入屠苏。是的，过完年也就意味着长了一岁，从年龄上来说自己真的老大不小了，但是就心理年龄而言，内心其实是个大男孩。只想说是沧桑忧愁了我的脸，人家其实才二十五，^_^。</p>
<p>喜欢简单，或者源于个性，或许出于经历。生活的劳累苦于心，心如间，需要我们进行删繁。这一年听的歌曲始终停留在民谣，最喜欢的歌手是汪晨蕊，不需要有太多的技巧，不需要有表现力多丰富的乐器，只是静静的弹着、唱着就能够让你内心产生一次一次的共鸣。真的，有些情绪是该说给懂的人听。  </p>
<a id="more"></a>
<p>新的一年暗暗的给自己几个期许，因为有你们我会一直努力，因为有你们我将更加优秀。最后，祝大家在新的一年里步步高升，幸福美满。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;旧历的年底毕竟最像年底，村镇上不必说，就在天空中也显出将到新年的气象来。灰白色的沉重的晚云中间时时发出闪光，接着一声钝响，是送灶的爆竹；近处燃放的可就更强烈了，震耳的大音还没有息，空气里已经散满了幽微的火药香。《祝福》-鲁迅  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;93年前鲁镇过年场景大致也与我们这边的习俗也类似吧？！天空中烟花声、爆竹声此起彼伏，夹杂着远处、近处的回声，一层一层的萦绕在耳边。  &lt;/p&gt;
&lt;p&gt;爆竹声中一岁除，春风送暖入屠苏。是的，过完年也就意味着长了一岁，从年龄上来说自己真的老大不小了，但是就心理年龄而言，内心其实是个大男孩。只想说是沧桑忧愁了我的脸，人家其实才二十五，^_^。&lt;/p&gt;
&lt;p&gt;喜欢简单，或者源于个性，或许出于经历。生活的劳累苦于心，心如间，需要我们进行删繁。这一年听的歌曲始终停留在民谣，最喜欢的歌手是汪晨蕊，不需要有太多的技巧，不需要有表现力多丰富的乐器，只是静静的弹着、唱着就能够让你内心产生一次一次的共鸣。真的，有些情绪是该说给懂的人听。  &lt;/p&gt;
    
    </summary>
    
    
      <category term="心情" scheme="http://javaer.site/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://javaer.site/2017/01/23/hello-world/"/>
    <id>http://javaer.site/2017/01/23/hello-world/</id>
    <published>2017-01-23T12:58:04.000Z</published>
    <updated>2017-01-28T03:03:35.263Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=38592976&auto=0&height=66"></iframe>  

<p>在Google君、Github君的帮助下，在完全闲下来的状态下，折腾了两天，我的个人博客终于搭建起来了。  </p>
<p>整个博客系统基于Hexo，而Hexo则出自台湾大学生 tommy351 之手，是一个基于 Node.js的静态博客程序，其编译上百篇文字只需要几秒。Markdown写作，Hexo生成的静态页面推送到 Github 仓库，域名与 Github pages 绑定，这样一个逼格极高适合程序猿写作方式的博客就搭建完了。Hexo这个名字我很喜欢，就连发音都像是黑客哦！     </p>
<p>一直纠结是否需要自己搭建一个博客系统，之前一直在Wiz笔记上写技术博客，可是从2017年1月份开始，Wiz开始收费了，免费版无法与云端进行同步。看着自己账号下边的483篇文章，思来想去还是动手自己弄一个吧，况且之前用Wiz笔记的时候也非常熟悉 Markdown 的语法了，也特别想通过这种分享方式推动着自己不断进步。我更愿意把它作为我的一个小领地，在这里可以区别于QQ空间、微博、微信朋友圈式的分享，这里我可以完全按照自己的方式去分享心情、技术和曾经踩过的坑。  </p>
<a id="more"></a>
<p>既然程序猿的世界数字永远从0开始，学习永远从 Hello World 开始，那么本篇博文就以 Hello Wolrd 为题吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=38592976&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;  

&lt;p&gt;在Google君、Github君的帮助下，在完全闲下来的状态下，折腾了两天，我的个人博客终于搭建起来了。  &lt;/p&gt;
&lt;p&gt;整个博客系统基于Hexo，而Hexo则出自台湾大学生 tommy351 之手，是一个基于 Node.js的静态博客程序，其编译上百篇文字只需要几秒。Markdown写作，Hexo生成的静态页面推送到 Github 仓库，域名与 Github pages 绑定，这样一个逼格极高适合程序猿写作方式的博客就搭建完了。Hexo这个名字我很喜欢，就连发音都像是黑客哦！     &lt;/p&gt;
&lt;p&gt;一直纠结是否需要自己搭建一个博客系统，之前一直在Wiz笔记上写技术博客，可是从2017年1月份开始，Wiz开始收费了，免费版无法与云端进行同步。看着自己账号下边的483篇文章，思来想去还是动手自己弄一个吧，况且之前用Wiz笔记的时候也非常熟悉 Markdown 的语法了，也特别想通过这种分享方式推动着自己不断进步。我更愿意把它作为我的一个小领地，在这里可以区别于QQ空间、微博、微信朋友圈式的分享，这里我可以完全按照自己的方式去分享心情、技术和曾经踩过的坑。  &lt;/p&gt;
    
    </summary>
    
    
      <category term="心情" scheme="http://javaer.site/tags/%E5%BF%83%E6%83%85/"/>
    
      <category term="hexo" scheme="http://javaer.site/tags/hexo/"/>
    
  </entry>
  
</feed>
